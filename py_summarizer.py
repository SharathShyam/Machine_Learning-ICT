# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xRWzPfc6vYiJCVASlBEGYCIF_f0W67nK
"""

class Calculator:
    def add(self, x, y):
        return x + y

    def subtract(self, x, y):
        return x - y

    def multiply(self, x, y):
        return x * y

    def divide(self, x, y):
        if y == 0:
            return "Error: Division by zero!"
        return x / y

    def calculate(self, expression):
        try:
            # Splitting the expression into operands and operator
            operands = expression.split()
            x = int(operands[0])
            operator = operands[1]
            y = int(operands[2])

            # Performing the operation based on the operator
            if operator == '+':
                return self.add(x, y)
            elif operator == '-':
                return self.subtract(x, y)
            elif operator == '*':
                return self.multiply(x, y)
            elif operator == '/':
                return self.divide(x, y)
            else:
                return "Error: Invalid operator!"
        except Exception as e:
            # If there's an error during calculation, print the error message
            return "Error: " + str(e)


def main():
    # Creating an instance of the Calculator class
    calculator = Calculator()

    # Prompting the user to input an expression
    expression = input("Enter an expression (e.g., 1 + 2): ")

    # Calling the calculate method of the Calculator instance and printing the result
    result = calculator.calculate(expression)
    print("Result:", result)


# Calling the main function to start the program
if __name__ == "__main__":
    main()

!pip install sympy

# prompt: create a calculator code using sympy

import sympy

class Calculator:
    def __init__(self):
        self.x = sympy.Symbol('x')
        self.y = sympy.Symbol('y')

    def add(self, x, y):
        return sympy.simplify(self.x + self.y)

    def subtract(self, x, y):
        return sympy.simplify(self.x - self.y)

    def multiply(self, x, y):
        return sympy.simplify(self.x * self.y)

    def divide(self, x, y):
        if y == 0:
            return "Error: Division by zero!"
        return sympy.simplify(self.x / self.y)

    def calculate(self, expression):
        try:
            return sympy.simplify(expression)
        except Exception as e:
            return "Error: " + str(e)


def main():
    # Creating an instance of the Calculator class
    calculator = Calculator()

    # Prompting the user to input an expression
    expression = input("Enter an expression (e.g., x + y): ")

    # Calling the calculate method of the Calculator instance and printing the result
    result = calculator.calculate(expression)
    print("Result:", result)


# Calling the main function to start the program
if __name__ == "__main__":
    main()

from sumy.parsers.plaintext import PlaintextParser
from sumy.nlp.tokenizers import Tokenizer
from sumy.summarizers.text_rank import TextRankSummarizer

def summarize_text(text, sentences_count=2):
    # Initialize a parser with the provided text
    parser = PlaintextParser.from_string(text, Tokenizer("english"))

    # Initialize a TextRank summarizer
    summarizer = TextRankSummarizer()

    # Get the summary with the specified number of sentences
    summary = summarizer(parser.document, sentences_count)

    # Convert the summary to a string
    summary_text = " ".join(str(sentence) for sentence in summary)

    return summary_text

if __name__ == "__main__":
    # Prompt the user to input text
    text = input("Enter the text to summarize: ")

    # Prompt the user to specify the number of sentences in the summary
    sentences_count = int(input("Enter the number of sentences in the summary: "))

    # Summarize the text
    summary = summarize_text(text, sentences_count)

    # Print the summary
    print("Summary:")
    print(summary)

!pip install sumy



import nltk
nltk.download("popular")